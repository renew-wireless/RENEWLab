function [Array, codebook, angles] = replicate_RENEW_array(M_y,M_x, Frequency, cb_size, isPlot)
    
    % MATLAB Code from Sensor Array Analyzer App
    % Generated by MATLAB 9.12 and Phased Array System Toolbox 4.7
    % Generated on 11-Oct-2022 11:03:57
    % Create a uniform rectangular array
    
    %M_y = 2 % rows
    %M_x = 4 % cols
    M = M_y * M_x;
    
    Array = phased.URA('Size',[M_y M_x],...
        'Lattice','Rectangular','ArrayNormal','x');
    Array.ElementSpacing = [0.07935 0.06668];
    % Calculate Row taper
    rwind = ones(1,M_x).';
    % Calculate Column taper
    cwind = ones(1,M_y).';
    % Calculate taper
    taper = rwind*cwind.';
    Array.Taper = taper.';
    
    % Create an isotropic antenna element
    Elem = phased.IsotropicAntennaElement;
    Elem.BackBaffled = true;
    Elem.FrequencyRange = [0 Frequency]; % NOTE Frequency has to be a single value
    Array.Element = Elem;
    
    % Assign Frequencies and Propagation Speed
    %Frequency = 3.5475e9;
    PropagationSpeed = physconst('LightSpeed');
    
    
    % Assign Phase shift quantization bits
    PhaseShiftBits = 0;
    
    % Create Figure
    
    if isPlot 
        % Plot Array Geometry
        figure(1);
        viewArray(Array,'ShowNormal',false,...
            'ShowTaper',false,'ShowIndex','None',...
            'ShowLocalCoordinates',true,'ShowAnnotation',false,...
            'Orientation',[0;0;0]);
    end
    % Calculate Steering Weights
    
    
    angles = linspace(-90,90,cb_size);
    codebook = zeros(cb_size, getNumElements(Array), length(Frequency));
    for ix=1:length(angles)
    
        % Assign Steering Angles
        SteeringAngles = [angles(ix);0];
    
        % Find the weights
        w = zeros(getNumElements(Array), length(Frequency));
        SteerVector = phased.SteeringVector('SensorArray', Array,...
            'PropagationSpeed', PropagationSpeed, 'NumPhaseShifterBits', PhaseShiftBits(1));
        for idx = 1:length(Frequency)
            w(:, idx) = step(SteerVector, Frequency(idx), SteeringAngles(:, idx));
        end
        
        % assign current code to codebook
        %codebook(ix,:,:) = w(:,1) / sqrt(M); % NOTE: apparently we don't need this normalization here??
        codebook(ix,:,:) = w(:,1);

        if isPlot
            % Plot 3d graph
            format = 'polar';
            plotType = 'Directivity';
            figure(2);
            pattern(Array, Frequency , 'PropagationSpeed', PropagationSpeed,...
                'CoordinateSystem', format,'weights', w(:,1),...
                'ShowArray',false,'ShowLocalCoordinates',true,...
                'ShowColorbar',true,'Orientation',[0;0;0],...
                'Type', plotType);
        
        
            % Plot 2d azimuth graph
            format = 'polar';
            cutAngle = 0;
            plotType = 'Directivity';
            plotStyle = 'Overlay';
            figure(3);
            pattern(Array, Frequency, -180:180, cutAngle, 'PropagationSpeed', PropagationSpeed,...
                'CoordinateSystem', format ,'weights', w, ...
                'Type', plotType, 'PlotStyle', plotStyle);
            
            % Plot Grating Lobe Diagram
            %figure;
            %plotGratingLobeDiagram(Array,Frequency(1),SteeringAngles(:,1),PropagationSpeed);

        end
    end

end
